#!/bin/bash

# Phraseling - Local AI-powered text rephrasing tool
# Version: 1.0.0
# Usage: phraseling "text to rephrase"

VERSION="1.0.0"
SCRIPT_NAME="Phraseling"
LOG_FILE="$HOME/.phraseling/rephraser.log"
CONFIG_FILE="$HOME/.phraseling/config"
TEMP_LOG="/tmp/phraseling_temp.log"

# Default configuration
DEFAULT_MODEL="gpt-oss:latest"
DEFAULT_PROMPT_STYLE="professional"

# Create config directory if it doesn't exist
mkdir -p "$HOME/.phraseling"

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    fi

    # Set defaults if not configured
    MODEL="${MODEL:-$DEFAULT_MODEL}"
    PROMPT_STYLE="${PROMPT_STYLE:-$DEFAULT_PROMPT_STYLE}"
}

# Function to add log entry at top
log_entry() {
    local message="$1"
    if [[ -f "$LOG_FILE" ]]; then
        echo "$message" > "$TEMP_LOG"
        cat "$LOG_FILE" >> "$TEMP_LOG"
        mv "$TEMP_LOG" "$LOG_FILE"
    else
        echo "$message" > "$LOG_FILE"
    fi
}

# Clean old logs (keep only today's entries)
clean_old_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        local today=$(date '+%a %b %d')
        grep "^$today" "$LOG_FILE" > "$TEMP_LOG" 2>/dev/null || touch "$TEMP_LOG"
        mv "$TEMP_LOG" "$LOG_FILE"
    fi
}

# Generate prompt based on style
generate_prompt() {
    local text="$1"
    local style="$2"

    case "$style" in
        "professional")
            echo "You're a Senior Communications Strategist with expertise in text refinement.

üéØ OBJECTIVE: Transform text while preserving core meaning. Enhance clarity, flow, and professionalism. Modernize language, eliminate redundancy, restructure for impact.

‚öôÔ∏è OUTPUT: Single polished version. Natural tone, human voice, never robotic.

Text to rephrase: \"$text\"

IMPORTANT: Respond with ONLY the rephrased text. No explanations or additional commentary."
            ;;
        "casual")
            echo "Make this text more casual and friendly while keeping the meaning clear:

\"$text\"

IMPORTANT: Respond with ONLY the rephrased text."
            ;;
        "formal")
            echo "Make this text more formal and business-appropriate:

\"$text\"

IMPORTANT: Respond with ONLY the rephrased text."
            ;;
        *)
            generate_prompt "$text" "professional"
            ;;
    esac
}

# Check if Ollama is installed and running
check_ollama() {
    if ! command -v ollama &> /dev/null; then
        echo "‚ùå Error: Ollama is not installed."
        echo "üì• Install it from: https://ollama.ai"
        echo "üí° Or run: brew install ollama"
        exit 1
    fi

    # Check if model exists
    if ! ollama list | grep -q "$MODEL"; then
        echo "üì• Model '$MODEL' not found. Downloading..."
        ollama pull "$MODEL"

        if [ $? -ne 0 ]; then
            echo "‚ùå Failed to download model '$MODEL'"
            echo "üí° Try: ollama pull llama2"
            exit 1
        fi
    fi
}

# Show help
show_help() {
    cat << EOF
$SCRIPT_NAME v$VERSION - Transform text with local AI

USAGE:
    phraseling "text to rephrase"
    phraseling --help
    phraseling --version
    phraseling --config
    phraseling --log

OPTIONS:
    --style=STYLE    Set rephrasing style (professional, casual, formal)
    --model=MODEL    Use specific Ollama model
    --config         Show current configuration
    --log           Show today's log
    --clear-log     Clear log file
    --help          Show this help
    --version       Show version

EXAMPLES:
    phraseling "hey whats up"
    phraseling --style=formal "thanks for the help"
    phraseling --model=llama2 "quick message here"

STYLES:
    professional    Clear, polished business writing (default)
    casual          Friendly, conversational tone
    formal          Academic or official document style

EOF
}

# Show configuration
show_config() {
    echo "$SCRIPT_NAME Configuration:"
    echo "  Model: $MODEL"
    echo "  Prompt Style: $PROMPT_STYLE"
    echo "  Log File: $LOG_FILE"
    echo "  Config File: $CONFIG_FILE"
}

# Parse arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --version|-v)
                echo "$SCRIPT_NAME v$VERSION"
                exit 0
                ;;
            --config)
                show_config
                exit 0
                ;;
            --log)
                if [[ -f "$LOG_FILE" ]]; then
                    cat "$LOG_FILE"
                else
                    echo "No log file found."
                fi
                exit 0
                ;;
            --clear-log)
                rm -f "$LOG_FILE"
                echo "Log cleared."
                exit 0
                ;;
            --style=*)
                PROMPT_STYLE="${1#*=}"
                shift
                ;;
            --model=*)
                MODEL="${1#*=}"
                shift
                ;;
            *)
                # This is the text to rephrase
                INPUT_TEXT="$1"
                break
                ;;
        esac
    done
}

# Main function
main() {
    # Load configuration
    load_config

    # Parse command line arguments
    parse_args "$@"

    # Clean old logs
    clean_old_logs

    # Check if text was provided
    if [[ -z "$INPUT_TEXT" ]]; then
        echo "‚ùå Error: No text provided"
        echo "üí° Usage: phraseling \"text to rephrase\""
        echo "üí° Help: phraseling --help"
        log_entry "$(date): ERROR - No text provided"
        exit 1
    fi

    # Check if input is a file path (for RTF handling from Mac shortcuts)
    if [[ -f "$INPUT_TEXT" ]]; then
        INPUT_TEXT=$(cat "$INPUT_TEXT" 2>/dev/null || echo "$INPUT_TEXT")
        log_entry "$(date): INPUT (from file) - $INPUT_TEXT"
    else
        log_entry "$(date): INPUT - $INPUT_TEXT"
    fi

    # Check Ollama
    check_ollama

    # Generate prompt
    PROMPT=$(generate_prompt "$INPUT_TEXT" "$PROMPT_STYLE")

    # Call Ollama and filter output
    RESULT=$(ollama run "$MODEL" "$PROMPT" 2>/dev/null | grep -v "^Thinking\.\.\." | grep -v "^\.\.\.done thinking\.$" | sed '/^$/d' | tail -n 1)

    if [[ -z "$RESULT" ]]; then
        echo "‚ùå Error: No response from AI model"
        log_entry "$(date): ERROR - No response from model $MODEL"
        exit 1
    fi

    # Log the output
    log_entry "$(date): ---"
    log_entry "$(date): OUTPUT - $RESULT"

    # Output the result
    echo "$RESULT"
}

# Run main function
main "$@"